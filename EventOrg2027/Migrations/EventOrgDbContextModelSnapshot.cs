// <auto-generated />
using System;
using EventOrg2027.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace EventOrg2027.Migrations
{
    [DbContext(typeof(EventOrgDbContext))]
    partial class EventOrgDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("EventOrg2027.Models.Eventos", b =>
                {
                    b.Property<int>("EventosId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DataRealizacao")
                        .HasColumnType("datetime2");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("HoraInicio")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("LocalidadeId")
                        .HasColumnType("int");

                    b.Property<string>("Lotacao")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NomeEventos")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int?>("TipoEventosId")
                        .HasColumnType("int");

                    b.HasKey("EventosId");

                    b.HasIndex("LocalidadeId");

                    b.HasIndex("TipoEventosId");

                    b.ToTable("Eventos");
                });

            modelBuilder.Entity("EventOrg2027.Models.Localidade", b =>
                {
                    b.Property<int>("LocalidadeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("NomeLocalidade")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("LocalidadeId");

                    b.ToTable("Localidade");
                });

            modelBuilder.Entity("EventOrg2027.Models.TipoEventos", b =>
                {
                    b.Property<int>("TipoEventosId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("NomeTipoEventos")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("TipoEventosId");

                    b.ToTable("TiposEventos");
                });

            modelBuilder.Entity("EventOrg2027.Models.Eventos", b =>
                {
                    b.HasOne("EventOrg2027.Models.Localidade", "localidade")
                        .WithMany()
                        .HasForeignKey("LocalidadeId");

                    b.HasOne("EventOrg2027.Models.TipoEventos", "tipoEventos")
                        .WithMany()
                        .HasForeignKey("TipoEventosId");
                });
#pragma warning restore 612, 618
        }
    }
}
